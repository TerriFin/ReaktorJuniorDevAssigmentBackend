{"version":3,"sources":["components/Modules.js","components/Module.js","index.js"],"names":["Modules","props","modules","map","module","i","key","to","Module","useState","currentModule","setCurrentModule","moduleName","useParams","useEffect","axios","get","then","response","window","scrollTo","data","description","dependencies","dep","reverseDependencies","revDep","className","ReactDOM","render","setModules","exact","path","document","getElementById"],"mappings":"yTA6BeA,EAzBC,SAACC,GAAW,IAClBC,EAAYD,EAAZC,QACR,OACE,6BACE,6DACA,6BACA,4BACGA,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAME,GAAIH,GACPA,QAKT,+BCuESI,EAtFA,WAAM,MAOuBC,mBAAS,IAPhC,mBAOZC,EAPY,KAOGC,EAPH,KAUXC,EAAeC,cAAfD,WAGRE,qBAAU,WACRC,IAAMC,IAAN,eAAkBJ,IACfK,MAAK,SAACC,GAELC,OAAOC,SAAS,EAAG,GACnBT,EAAiBO,EAASG,WAG7B,CAACT,IA6BJ,OAAIF,EAEA,6BACE,4BAAKE,GACL,6BACA,2BAAIF,EAAcY,aAClB,6BACA,8CACA,6BACA,6BAjCAZ,EAAca,aACTb,EAAca,aAGhB,IA8BkBpB,KAAI,SAACqB,EAAKnB,GAAN,OAAY,wBAAIC,IAAKD,GAAG,kBAAC,IAAD,CAAME,GAAIiB,GAAMA,QAEjE,6BACA,sDACA,6BA9BAd,EAAce,oBACTf,EAAce,oBAGhB,IA2ByBtB,KAAI,SAACuB,EAAQrB,GAAT,OAAe,wBAAIC,IAAKD,GAAG,kBAAC,IAAD,CAAME,GAAImB,GAASA,QAE9E,6BACA,2BAAG,kBAAC,IAAD,CAAMC,UAAU,OAAOpB,GAAG,KAA1B,kBACH,8BAMJ,6BACE,4BAAKK,GACL,6BACA,+EACA,6BACA,2BAAG,kBAAC,IAAD,CAAMe,UAAU,OAAOpB,GAAG,KAA1B,kBACH,+BCzCNqB,IAASC,OAAO,mBA/BJ,WAAO,IAAD,EACcpB,mBAAS,IADvB,mBACTP,EADS,KACA4B,EADA,KAgBhB,OATAhB,qBAAU,WACRC,IAAMC,IAAI,QACPC,MAAK,SAACC,GAELC,OAAOC,SAAS,EAAG,GACnBU,EAAWZ,EAASG,WAEvB,IAGD,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAS9B,QAASA,KAEpB,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,gBAChB,kBAAC,EAAD,WAQM,MAASC,SAASC,eAAe,W","file":"static/js/main.f406c990.chunk.js","sourcesContent":["import React from 'react'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst Modules = (props) => {\n  const { modules } = props\n  return (\n    <div>\n      <h1>Modules loaded in the system:</h1>\n      <br />\n      <ol>\n        {modules.map((module, i) => (\n          <li key={i}>\n            <Link to={module}>\n              {module}\n            </Link>\n          </li>\n        ))}\n      </ol>\n      <br />\n    </div>\n  )\n}\n\nModules.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  modules: propTypes.array.isRequired,\n}\n\nexport default Modules\n","import React, { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport axios from 'axios'\n\nconst Module = () => {\n  /*\n  We need to get the module data from backend here, because only here we know the current url\n  I took a small shortcut here, i would have liked to make a container\n  that fetches this data with a dedicated api folder and feeds it to this component with props,\n  but since this app is so small it would have made the code more complicated than it needed to be\n  */\n  const [currentModule, setCurrentModule] = useState({})\n\n  // Get current url parameter 'moduleName'\n  const { moduleName } = useParams()\n\n  // Get data from backend using url\n  useEffect(() => {\n    axios.get(`/api/${moduleName}`)\n      .then((response) => {\n        // eslint-disable-next-line no-undef\n        window.scrollTo(0, 0)\n        setCurrentModule(response.data)\n      })\n      // run this effect only if url parameter changes\n  }, [moduleName])\n\n  // Not every module has dependencies or reverse dependencies,\n  // so we return an empty list instead of undefined if that is the case.\n  const getDependencies = () => {\n    if (currentModule.dependencies) {\n      return currentModule.dependencies\n    }\n\n    return []\n  }\n\n  const getReverseDependencies = () => {\n    if (currentModule.reverseDependencies) {\n      return currentModule.reverseDependencies\n    }\n\n    return []\n  }\n\n  /*\n  There is no way of modifying the data given by server,\n  so there is no way of changing the index of given modules.\n\n  If there needed to be a way of sending stuff to the backend,\n  i would add the current module index inside the backend.\n\n  Preferably thought the index would be added automatically by some database or other system.\n  */\n  if (currentModule) {\n    return (\n      <div>\n        <h1>{moduleName}</h1>\n        <br />\n        <p>{currentModule.description}</p>\n        <br />\n        <h2>Dependencies: </h2>\n        <br />\n        <ul>\n          {getDependencies().map((dep, i) => <li key={i}><Link to={dep}>{dep}</Link></li>)}\n        </ul>\n        <br />\n        <h2>Reverse Dependencies: </h2>\n        <ul>\n          {getReverseDependencies().map((revDep, i) => <li key={i}><Link to={revDep}>{revDep}</Link></li>)}\n        </ul>\n        <br />\n        <p><Link className=\"back\" to=\"/\">Back to index</Link></p>\n        <br />\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>{moduleName}</h1>\n      <br />\n      <p>This module is not found in the system, sorry :(</p>\n      <br />\n      <p><Link className=\"back\" to=\"/\">Back to index</Link></p>\n      <br />\n    </div>\n  )\n}\n\nexport default Module\n","// Since the app is so small, i just define all css in this one file, and dont use classNames.\nimport './index.css'\nimport React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom'\nimport axios from 'axios'\n\nimport Modules from './components/Modules'\nimport Module from './components/Module'\n\nconst App = () => {\n  const [modules, setModules] = useState([])\n\n  /*\n  This effect only needs to be run once,\n  as there is no way to change the modules once they are fetched.\n  */\n  useEffect(() => {\n    axios.get('/api')\n      .then((response) => {\n        // eslint-disable-next-line no-undef\n        window.scrollTo(0, 0)\n        setModules(response.data)\n      })\n  }, [])\n\n  return (\n    <div>\n      <Router>\n        <Route exact path=\"/\">\n          <Modules modules={modules} />\n        </Route>\n        <Route exact path=\"/:moduleName\">\n          <Module />\n        </Route>\n      </Router>\n    </div>\n  )\n}\n\n// eslint-disable-next-line no-undef\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}